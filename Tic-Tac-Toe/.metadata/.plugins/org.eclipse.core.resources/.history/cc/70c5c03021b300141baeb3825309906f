import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;

import javax.swing.JPanel;

@SuppressWarnings("serial")
public class GamePanel extends JPanel {
	
	public final int PLACEHOLDER_SIZE = 100, GAP = 5;
	
	private int panelSize = PLACEHOLDER_SIZE * GameModel.BOARD_SIZE + GAP * (GameModel.BOARD_SIZE - 1);
	
	private Mark[][] boardRef;
	
	public GamePanel(Mark[][] boardRef) {
		
		setPreferredSize(new Dimension(panelSize, panelSize));
		setLayout(new GridLayout(GameModel.BOARD_SIZE, GameModel.BOARD_SIZE, GAP, GAP));
		
		this.boardRef = boardRef;
		
		for (int i = 0; i < GameModel.BOARD_SIZE; i++) {
			for (int j = 0; j < GameModel.BOARD_SIZE; j++) {
				add(new EmptyPanel());
				
			}
		}
		
		//SetupPanel();
		
		//repaint();
	}
	
	public void paintComponent(Graphics page) {
		
		super.paintComponent(page);
		
		removeAll();
		
		
		
		for (int i = 0; i < GameModel.BOARD_SIZE; i++) {
			for (int j = 0; j < GameModel.BOARD_SIZE; j++) {
				add(new EmptyPanel(), 3);
				
			}
		}
		
		//SetupPanel();
		
	}
	
	private void SetupPanel() {
		
		for (int i = 0; i < GameModel.BOARD_SIZE; i++) {
			for (int j = 0; j < GameModel.BOARD_SIZE; j++) {
				add(new EmptyPanel());
				if (boardRef[i][j] == null) {
					System.out.println(boardRef[i][j]);
					add(new EmptyPanel());
				} 
				else if (boardRef[i][j].isXMark) {
					add(new XMarkPanel());
				}
				else {
					add(new OMarkPanel());
				}
			}
		}
	}
}
