import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.MouseListener;

import javax.swing.JPanel;

@SuppressWarnings("serial")
public class GamePanel extends JPanel {
	
	public final int PLACEHOLDER_SIZE = 100, GAP = 4;
	
	private int panelSize = PLACEHOLDER_SIZE * GameModel.BOARD_SIZE + GAP * (GameModel.BOARD_SIZE - 1);
	
	private Mark[][] boardRef;
	
	public GamePanel(Mark[][] boardRef, MouseListener mouseListener) {
		
		setPreferredSize(new Dimension(panelSize, panelSize));
		setLayout(new GridLayout(GameModel.BOARD_SIZE, GameModel.BOARD_SIZE, GAP, GAP));
		addMouseListener(mouseListener);
		
		this.boardRef = boardRef;
		
		for (int i = 0; i < GameModel.BOARD_SIZE; i++) {
			for (int j = 0; j < GameModel.BOARD_SIZE; j++) {
					add(new EmptyPanel());
			}
		}
		System.out.println(getComponent(1).setPanelStatusToX());
	}
	
	public void paintComponent(Graphics page) {
		System.out.println("Test");
		super.paintComponent(page);
		
		//removeAll();
		
		updatePanel();
		
		revalidate();
	}
	
	/*public void updateBoardRef(Mark[][] boardRef) {
		this.boardRef = boardRef;
	}*/
	
	private void updatePanel() {
		
		for (int i = 0; i < GameModel.BOARD_SIZE; i++) {
			for (int j = 0; j < GameModel.BOARD_SIZE; j++) {
				if (boardRef[i][j] != null) {
					
					if (boardRef[i][j].isXMark()) {
						//getComponent(i*3+j).setp
					}
					else {
						//add(new OMarkPanel());
					}
				}
			}
		}
	}
}
